---
# Idiomatic Go guidelines distilled from *Effective Go*
# Auto-attaches whenever a Go source file is in context.
description: Follow these conventions to produce clear, idiomatic Go in this repository.
globs:
  - "**/*.go"
alwaysApply: false          # Auto-attach on *.go instead of injecting everywhere
---

# Formatting
- Run `gofmt`/`go fmt ./...` before committing; never hand-format.
- Indent with **tabs**; `gofmt` handles vertical alignment.
- Keep lines readable; wrap and indent if they feel too long.

# Naming
- **Packages:** lower-case, one word, no underscores (`encoding/base64 → base64`).
- **Exported identifiers:** start with **upper-case**; unexported with lower-case.
- **Multi-word names:** `MixedCaps` (no underscores).
- **Getters:** omit the `Get` prefix (`Owner()`, not `GetOwner()`).
- **One-method interfaces:** method name + `-er` (`Reader`, `Writer`, …).

# Control flow
- No parentheses around `if`, `for`, `switch` conditions; brace on same line.
- Omit `else` if the `if` block ends in `return`, `break`, or `continue`.
- Re-use a single `err` with `:=` redeclaration in separate `if` statements.

# Error handling
- Functions that can fail return `(value, error)`.
- Check errors immediately and return early to keep the success path flush left.
- Use `panic` only for unrecoverable programmer mistakes.

# Concurrency
- Prefer goroutines + channels over shared mutable state.
- Close channels to broadcast completion; use buffered channels only when capacity is clear.

# Defer
- Defer resource release (`Close`, `Unlock`) directly after acquisition.
- Remember arguments to deferred calls are evaluated at the point of `defer`.

# Data & methods
- Design types so the **zero value is useful** (e.g. `bytes.Buffer`, `sync.Mutex`).
- Use `new(T)` for zeroed allocations; `make` only for slices, maps, channels.
- Choose **pointer receivers** when the method mutates the receiver or the receiver is large.

# Imports & packages
- Group standard-library imports separately from third-party ones; let `goimports` order them.
- Avoid `import .` except in tests.

# Tests
- Name test files `*_test.go`; use the `testing` package.
- Prefer **table-driven tests**; use `t.Run` for sub-cases.

# Documentation
- Write complete-sentence comments immediately above exported declarations.
- Package comment starts with `Package <name> ...`.
- Run `go vet` to catch doc and style issues.

