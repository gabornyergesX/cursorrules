#!/bin/bash

# Cursor Rules Setup Script
# This script helps set up cursor rules for a new project

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CURSOR_RULES_DIR="$(dirname "$SCRIPT_DIR")"

echo -e "${GREEN}🎯 Cursor Rules Setup${NC}"
echo "Setting up cursor rules for your project..."

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}❌ Error: Not in a git repository${NC}"
    echo "Please run this script from within a git repository."
    exit 1
fi

# Get project root (git root)
PROJECT_ROOT=$(git rev-parse --show-toplevel)
echo "📁 Project root: $PROJECT_ROOT"

# Function to create modular cursor rules
create_modular_rules() {
    local selected_modules=("$@")
    local output_file="$PROJECT_ROOT/.cursorrules"
    
    echo "# Project-Specific Cursor Rules" > "$output_file"
    echo "# Generated by cursorrules setup script" >> "$output_file"
    echo "# $(date)" >> "$output_file"
    echo "" >> "$output_file"
    
    # Always include base rules first
    echo "# === BASE DEVELOPMENT RULES ===" >> "$output_file"
    cat "$CURSOR_RULES_DIR/rules/base.md" >> "$output_file"
    echo "" >> "$output_file"
    
    # Add selected modules
    for module in "${selected_modules[@]}"; do
        if [ -f "$CURSOR_RULES_DIR/rules/${module}.md" ]; then
            echo "# === $(echo "$module" | tr 'a-z-' 'A-Z ') RULES ===" >> "$output_file"
            cat "$CURSOR_RULES_DIR/rules/${module}.md" >> "$output_file"
            echo "" >> "$output_file"
        fi
    done
    
    echo -e "${GREEN}✅ Created modular cursor rules with: base $(printf ", %s" "${selected_modules[@]}")${NC}"
}

# Parse command line arguments
SETUP_MODE="interactive"
SELECTED_MODULES=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --mode)
            SETUP_MODE="$2"
            shift 2
            ;;
        --modules)
            IFS=',' read -ra SELECTED_MODULES <<< "$2"
            shift 2
            ;;
        --help)
            echo "Usage: $0 [--mode interactive|symlink|modular] [--modules module1,module2,...]"
            echo ""
            echo "Modes:"
            echo "  interactive  - Interactive setup with choices (default)"
            echo "  symlink      - Create symlink to global rules"
            echo "  modular      - Create project-specific rules with selected modules"
            echo ""
            echo "Available modules: git, github, kotlin, linear, notion"
            echo ""
            echo "Examples:"
            echo "  $0                                    # Interactive setup"
            echo "  $0 --mode symlink                     # Just symlink global rules"
            echo "  $0 --mode modular --modules git,kotlin    # Modular with specific modules"
            exit 0
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

# Check if .cursorrules already exists
if [ -f "$PROJECT_ROOT/.cursorrules" ]; then
    echo -e "${YELLOW}⚠️  .cursorrules already exists${NC}"
    read -p "Do you want to replace it? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
    rm "$PROJECT_ROOT/.cursorrules"
fi

# Setup based on mode
case $SETUP_MODE in
    "symlink")
        # Create symlink to main cursor rules
        ln -sf "$CURSOR_RULES_DIR/.cursorrules" "$PROJECT_ROOT/.cursorrules"
        echo -e "${GREEN}✅ Created symlink to global cursor rules${NC}"
        ;;
    
    "modular")
        if [ ${#SELECTED_MODULES[@]} -eq 0 ]; then
            echo -e "${RED}❌ No modules specified for modular mode${NC}"
            echo "Use --modules to specify which modules to include"
            exit 1
        fi
        create_modular_rules "${SELECTED_MODULES[@]}"
        ;;
    
    "interactive"|*)
        echo ""
        echo -e "${BLUE}📋 Setup Options${NC}"
        echo "1. Symlink to global rules (recommended for most projects)"
        echo "2. Create project-specific rules with selected modules"
        echo ""
        read -p "Choose setup type (1-2): " -n 1 -r setup_choice
        echo ""
        
        case $setup_choice in
            1)
                ln -sf "$CURSOR_RULES_DIR/.cursorrules" "$PROJECT_ROOT/.cursorrules"
                echo -e "${GREEN}✅ Created symlink to global cursor rules${NC}"
                ;;
            2)
                echo ""
                echo -e "${BLUE}📦 Available Rule Modules${NC}"
                echo "Select which rule modules to include (space-separated):"
                echo ""
                
                available_modules=()
                module_descriptions=(
                    "git:Git version control workflows"
                    "github:GitHub platform features and PRs"
                    "kotlin:Kotlin-specific development rules"
                    "linear:Linear issue management integration"
                    "notion:Notion documentation and knowledge management"
                )
                
                for desc in "${module_descriptions[@]}"; do
                    module=$(echo "$desc" | cut -d: -f1)
                    description=$(echo "$desc" | cut -d: -f2)
                    available_modules+=("$module")
                    echo "  $module - $description"
                done
                
                echo ""
                echo "Note: 'base' rules are always included"
                echo ""
                read -p "Enter modules to include (e.g., git github kotlin): " -a user_modules
                
                if [ ${#user_modules[@]} -eq 0 ]; then
                    echo -e "${YELLOW}⚠️  No modules selected, including all modules${NC}"
                    user_modules=("${available_modules[@]}")
                fi
                
                create_modular_rules "${user_modules[@]}"
                ;;
            *)
                echo -e "${RED}❌ Invalid choice${NC}"
                exit 1
                ;;
        esac
        ;;
esac

# Detect project type and suggest additional templates
if [ "$SETUP_MODE" = "interactive" ] || [ "$SETUP_MODE" = "symlink" ]; then
    echo ""
    echo "🔍 Detecting project type..."
    
    PROJECT_TYPE=""
    if [ -f "$PROJECT_ROOT/build.gradle.kts" ] || [ -f "$PROJECT_ROOT/build.gradle" ]; then
        PROJECT_TYPE="kotlin"
        echo "📱 Detected Kotlin/Gradle project"
    elif [ -f "$PROJECT_ROOT/package.json" ]; then
        PROJECT_TYPE="web"
        echo "🌐 Detected Web/Node.js project"
    elif [ -f "$PROJECT_ROOT/pom.xml" ]; then
        PROJECT_TYPE="kotlin"
        echo "☕ Detected Java/Maven project (using Kotlin template)"
    fi
    
    # Offer to create project-specific rules
    if [ -n "$PROJECT_TYPE" ]; then
        echo ""
        read -p "Would you like to create additional project-specific cursor rules? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            TEMPLATE_FILE="$CURSOR_RULES_DIR/templates/${PROJECT_TYPE}-project.md"
            PROJECT_RULES_FILE="$PROJECT_ROOT/.cursorrules-project"
            
            if [ -f "$TEMPLATE_FILE" ]; then
                cp "$TEMPLATE_FILE" "$PROJECT_RULES_FILE"
                echo -e "${GREEN}✅ Created project-specific rules: .cursorrules-project${NC}"
                echo "💡 You can customize these rules for your specific project needs"
            else
                echo -e "${YELLOW}⚠️  Template not found: $TEMPLATE_FILE${NC}"
            fi
        fi
    fi
fi

# Create .gitignore entry if needed
if [ -f "$PROJECT_ROOT/.gitignore" ]; then
    if ! grep -q ".cursorrules" "$PROJECT_ROOT/.gitignore"; then
        echo ""
        read -p "Add .cursorrules to .gitignore? (recommended) (Y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            echo "" >> "$PROJECT_ROOT/.gitignore"
            echo "# Cursor AI rules" >> "$PROJECT_ROOT/.gitignore"
            echo ".cursorrules" >> "$PROJECT_ROOT/.gitignore"
            if [ -f "$PROJECT_ROOT/.cursorrules-project" ]; then
                echo ".cursorrules-project" >> "$PROJECT_ROOT/.gitignore"
            fi
            echo -e "${GREEN}✅ Added .cursorrules to .gitignore${NC}"
        fi
    fi
fi

echo ""
echo -e "${GREEN}🎉 Setup complete!${NC}"
echo ""
echo "Next steps:"
echo "1. Restart Cursor to apply the new rules"
if [ -f "$PROJECT_ROOT/.cursorrules-project" ]; then
    echo "2. Review and customize .cursorrules-project if created"
fi
echo "$([ -f "$PROJECT_ROOT/.cursorrules-project" ] && echo "3." || echo "2.") Enjoy improved AI assistance! 🚀"

# Show what was created
echo ""
echo "Files created/modified:"
if [ -L "$PROJECT_ROOT/.cursorrules" ]; then
    echo "  📄 .cursorrules -> $CURSOR_RULES_DIR/.cursorrules (symlink)"
elif [ -f "$PROJECT_ROOT/.cursorrules" ]; then
    echo "  📄 .cursorrules (project-specific modular rules)"
fi
if [ -f "$PROJECT_ROOT/.cursorrules-project" ]; then
    echo "  📄 .cursorrules-project (project-specific template)"
fi
if grep -q ".cursorrules" "$PROJECT_ROOT/.gitignore" 2>/dev/null; then
    echo "  📄 .gitignore (updated)"
fi 